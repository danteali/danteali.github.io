{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dante's Docs \u00b6 Currently testing the capability/configuration of GitHub Pages and MkDocs Along with ironing out some of the differences in markdown syntax between Obsidian and Github Only uploaded a sample of files for the moment. Hopefully you'll still find the useful while I continue playing with the site configuration. This site is mainly a repository of my own notes which I've compiled over the last few years. The general purpose of the notes is to help me remember things. And this site helps as a backup to my local storage (not the only backup!). The notes also form something of a 'living document' which get updated as a learn more about a topic. Hopefully some of these will be crawled by Google and will help other solve issues that I've come acorss, or provide a shortcut to some of the things I had to spend a lot of time reaserching. Good Luck.","title":"Dante's Docs"},{"location":"#dantes-docs","text":"Currently testing the capability/configuration of GitHub Pages and MkDocs Along with ironing out some of the differences in markdown syntax between Obsidian and Github Only uploaded a sample of files for the moment. Hopefully you'll still find the useful while I continue playing with the site configuration. This site is mainly a repository of my own notes which I've compiled over the last few years. The general purpose of the notes is to help me remember things. And this site helps as a backup to my local storage (not the only backup!). The notes also form something of a 'living document' which get updated as a learn more about a topic. Hopefully some of these will be crawled by Google and will help other solve issues that I've come acorss, or provide a shortcut to some of the things I had to spend a lot of time reaserching. Good Luck.","title":"Dante's Docs"},{"location":"Exercise/Navigating%20with%20Garmin%20Fenix/","text":"Tags: #garmin #hike #cycle #gps #gpx Key Takeaways / Things to Remember \u00b6 Navigating with Garmin Fenix (and Forerunner) \u00b6 Some Garmin watches, including the Fenix, have a 'Navigation' function which can display minimalist maps on screen during activities. It is fairly trivial to get routes onto the watch and display them. Another mechanism is to use one of the 3rd party apps for the watches which tend to have more functionality than the Navigation function. They also work with more models, even if the model has no Nav function. I've used dynamicWatch in the past on non-Fenix watches to display maps during multi-day hikes. Find GPS file for your route - or make one. \u00b6 Finding GPS route files \u00b6 Depending on route, it can be fairly easy to find GPS files - usually saved in GPX format. Bike routes can be searched for in various locations including: * https://www.gmap-pedometer.com/ * https://ridewithgps.com/find * For Munros: * https://www.walkhighlands.co.uk/perthshire/schiehallion.shtml * https://www.haroldstreet.org.uk/waypoints/download/?hillnumber=314 Making GPS route files \u00b6 We can make a route using various tools. Online Tools (these let you save and export routes): \u00b6 https://ridewithgps.com/routes Export as GPX 'track' file for more granular mapping (i.e. more points in route). Export as GPX 'route' file for less granularity. https://www.plotaroute.com/myroutes https://www.gmap-pedometer.com/ Or in the online Garmin Connect app Desktop Tools \u00b6 See notes below on various Windows tools available but my preferred solution is JGPSTrackEdit GPXSee is a close second for viewing files but doesn't allow conversion. I've also heard reasonable things about Garmin's Basecamp app. You can create a route directly Basecamp, even if you didn\u2019t buy their maps. Before you start, you need to install some free routable maps. GPSFileDepot is a good place to start. Of note are the Open Street Map topographic routable and the Open Street Map routable bicycle (it has trails). Each source has it\u2019s own install directions, read them carefully. Once your maps have been installed, you can access them in Garmin Basecamp . Convert the route file \u00b6 Not all route file-types are supported. Typically the GPX file type is supported. The other file types (KML, FIT, ect) can be converted to GPX using the tools above. Import to Watch - Navigation-Capable Watches \u00b6 For watches with the Navigation function, you simply need to get the route file onto the watch. This can be done via: 1. The online Garmin Connect app * Training -> Courses -> Import (top right) Turn off uBlock or other similar extensions * Once Course imported/created, select the 'Send To Device' option. * It will sync to the watch when next sync'ing via wifi, or the Garmin Connect phone app. 2. The Windows Garmin Express app. 3. Import to Watch - Non-Navigation-Capable Watches \u00b6 You'll need an app to display the route on non-Nav capable devices. There are multiple map apps for the watches. When I last used this properly it was back in 2014 and I used dynamicWatch in the past on non-Fenix watches to display maps during multi-day hikes. But there appear to be many more similar maps available now. Suggest checking them out if you need to add routes to non-Nav watches. Useful guides \u00b6 ForeRunner 305: https://beige-alert.livejournal.com/185138.html Edge 305: https://frank.kinlan.co.uk/garmin-edge-305-route-planing-tutorial/ Tool List \u00b6 Additional tools which may come in handy. Convert GPS file types \u00b6 http://www.gpsies.com/convert.do GPSVisualizer Windows - GPSBabel GPSBabel converts waypoints, tracks, and routes between popular GPS receivers such as Garmin or Magellan and mapping programs like Google Earth or Basecamp. Literally hundreds of GPS receivers and programs are supported. Windows View / Edit GPS files \u00b6 JGPSTrackEdit JGPSTrackEdit is a free, portable, open source GPX viewer and editor for Windows. It is a Java based GPX file viewer which requires Java to be installed to work. Apart from GPX, you can view a variety of routes and GIS data files using it. Some of the supported file formats in it include TCX, KML, ASC, etc. ^8085bc GPXSee Free open source GPX viewer for Windows. As it\u2019s name suggests, it is a dedicated GPX file viewer that also supports many more file formats to view GPS data such as IGC, FIT, KML, SLF, TCX, etc. It lets you view GIS data, GPS data, Cadence, Speed, Elevation, Distance, and more. ^25ee35 Viking Free open source GPX viewer for Windows. It is good GPS data viewer and analyzer software which you can use to view GPX file. Apart from GPX, it also supports KML file formats to view routes and waypoints. You can also edit tracks and routes using this software. GpsPrune Free open source GPX viewer software for Windows. It a nice JAVA based software that lets you view GPS data by importing various files including GPX. It allows you to view and analyze GPX file with a lot of useful tools. You can view all tracks, routes, waypoints, etc., from GPX files with respective details. Plus, you can also modify GPX files as it provides a lot of GPS data editing tools. GPX Editor Free open source GPX editor that you can use to view GPX files. It is a portable GPX file viewer that you can use on the go. You can also view NMEA, KML, NGT, and LOG files in it. (Win Store) GPX viewer and recorder","title":"Navigating with Garmin Fenix"},{"location":"Exercise/Navigating%20with%20Garmin%20Fenix/#key-takeaways-things-to-remember","text":"","title":"Key Takeaways / Things to Remember"},{"location":"Exercise/Navigating%20with%20Garmin%20Fenix/#navigating-with-garmin-fenix-and-forerunner","text":"Some Garmin watches, including the Fenix, have a 'Navigation' function which can display minimalist maps on screen during activities. It is fairly trivial to get routes onto the watch and display them. Another mechanism is to use one of the 3rd party apps for the watches which tend to have more functionality than the Navigation function. They also work with more models, even if the model has no Nav function. I've used dynamicWatch in the past on non-Fenix watches to display maps during multi-day hikes.","title":"Navigating with Garmin Fenix (and Forerunner)"},{"location":"Exercise/Navigating%20with%20Garmin%20Fenix/#find-gps-file-for-your-route-or-make-one","text":"","title":"Find GPS file for your route - or make one."},{"location":"Exercise/Navigating%20with%20Garmin%20Fenix/#finding-gps-route-files","text":"Depending on route, it can be fairly easy to find GPS files - usually saved in GPX format. Bike routes can be searched for in various locations including: * https://www.gmap-pedometer.com/ * https://ridewithgps.com/find * For Munros: * https://www.walkhighlands.co.uk/perthshire/schiehallion.shtml * https://www.haroldstreet.org.uk/waypoints/download/?hillnumber=314","title":"Finding GPS route files"},{"location":"Exercise/Navigating%20with%20Garmin%20Fenix/#making-gps-route-files","text":"We can make a route using various tools.","title":"Making GPS route files"},{"location":"Exercise/Navigating%20with%20Garmin%20Fenix/#online-tools-these-let-you-save-and-export-routes","text":"https://ridewithgps.com/routes Export as GPX 'track' file for more granular mapping (i.e. more points in route). Export as GPX 'route' file for less granularity. https://www.plotaroute.com/myroutes https://www.gmap-pedometer.com/ Or in the online Garmin Connect app","title":"Online Tools (these let you save and export routes):"},{"location":"Exercise/Navigating%20with%20Garmin%20Fenix/#desktop-tools","text":"See notes below on various Windows tools available but my preferred solution is JGPSTrackEdit GPXSee is a close second for viewing files but doesn't allow conversion. I've also heard reasonable things about Garmin's Basecamp app. You can create a route directly Basecamp, even if you didn\u2019t buy their maps. Before you start, you need to install some free routable maps. GPSFileDepot is a good place to start. Of note are the Open Street Map topographic routable and the Open Street Map routable bicycle (it has trails). Each source has it\u2019s own install directions, read them carefully. Once your maps have been installed, you can access them in Garmin Basecamp .","title":"Desktop Tools"},{"location":"Exercise/Navigating%20with%20Garmin%20Fenix/#convert-the-route-file","text":"Not all route file-types are supported. Typically the GPX file type is supported. The other file types (KML, FIT, ect) can be converted to GPX using the tools above.","title":"Convert the route file"},{"location":"Exercise/Navigating%20with%20Garmin%20Fenix/#import-to-watch-navigation-capable-watches","text":"For watches with the Navigation function, you simply need to get the route file onto the watch. This can be done via: 1. The online Garmin Connect app * Training -> Courses -> Import (top right) Turn off uBlock or other similar extensions * Once Course imported/created, select the 'Send To Device' option. * It will sync to the watch when next sync'ing via wifi, or the Garmin Connect phone app. 2. The Windows Garmin Express app. 3.","title":"Import to Watch - Navigation-Capable Watches"},{"location":"Exercise/Navigating%20with%20Garmin%20Fenix/#import-to-watch-non-navigation-capable-watches","text":"You'll need an app to display the route on non-Nav capable devices. There are multiple map apps for the watches. When I last used this properly it was back in 2014 and I used dynamicWatch in the past on non-Fenix watches to display maps during multi-day hikes. But there appear to be many more similar maps available now. Suggest checking them out if you need to add routes to non-Nav watches.","title":"Import to Watch - Non-Navigation-Capable Watches"},{"location":"Exercise/Navigating%20with%20Garmin%20Fenix/#useful-guides","text":"ForeRunner 305: https://beige-alert.livejournal.com/185138.html Edge 305: https://frank.kinlan.co.uk/garmin-edge-305-route-planing-tutorial/","title":"Useful guides"},{"location":"Exercise/Navigating%20with%20Garmin%20Fenix/#tool-list","text":"Additional tools which may come in handy.","title":"Tool List"},{"location":"Exercise/Navigating%20with%20Garmin%20Fenix/#convert-gps-file-types","text":"http://www.gpsies.com/convert.do GPSVisualizer Windows - GPSBabel GPSBabel converts waypoints, tracks, and routes between popular GPS receivers such as Garmin or Magellan and mapping programs like Google Earth or Basecamp. Literally hundreds of GPS receivers and programs are supported.","title":"Convert GPS file types"},{"location":"Exercise/Navigating%20with%20Garmin%20Fenix/#windows-view-edit-gps-files","text":"JGPSTrackEdit JGPSTrackEdit is a free, portable, open source GPX viewer and editor for Windows. It is a Java based GPX file viewer which requires Java to be installed to work. Apart from GPX, you can view a variety of routes and GIS data files using it. Some of the supported file formats in it include TCX, KML, ASC, etc. ^8085bc GPXSee Free open source GPX viewer for Windows. As it\u2019s name suggests, it is a dedicated GPX file viewer that also supports many more file formats to view GPS data such as IGC, FIT, KML, SLF, TCX, etc. It lets you view GIS data, GPS data, Cadence, Speed, Elevation, Distance, and more. ^25ee35 Viking Free open source GPX viewer for Windows. It is good GPS data viewer and analyzer software which you can use to view GPX file. Apart from GPX, it also supports KML file formats to view routes and waypoints. You can also edit tracks and routes using this software. GpsPrune Free open source GPX viewer software for Windows. It a nice JAVA based software that lets you view GPS data by importing various files including GPX. It allows you to view and analyze GPX file with a lot of useful tools. You can view all tracks, routes, waypoints, etc., from GPX files with respective details. Plus, you can also modify GPX files as it provides a lot of GPS data editing tools. GPX Editor Free open source GPX editor that you can use to view GPX files. It is a portable GPX file viewer that you can use on the go. You can also view NMEA, KML, NGT, and LOG files in it. (Win Store) GPX viewer and recorder","title":"Windows View / Edit GPS files"},{"location":"Tech/Publishing%20Obsidian%20Markdown%20Files%20in%20Github%20Pages/","text":"Tags: #obsidian #github #github-pages #mkdocs Key Takeaways / Things to Remember \u00b6 Publishing Obsidian Markdown Files in Github Pages \u00b6 Another option is just to manually setup and configure your mkdocs.yml file and push the content to GitHub. There are also various docker images for mkdocs, their purpose seems to generally be to publish the static files locally (e.g. for dev/testing) instead of having to push to GitHub first. They may be useful as sources of config data as they seem to generate config files on first run. Using an MkDocs template \u00b6 MkDocs is simply a defined configuration and file structure that GitHub recognises and can use to display websites. MkDocs is a fast, simple static site generator (incl theming ) that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. It is supported out of the box by RTD , and can also host the files locally for dev purposes. Someone has made a specific template for MkDocs to work well with Obsidian notes. See: https://github.com/jobindj/obsidian-mkdocs * Copy the repo template to our account (using hyperlink inside source repo). Save in the special [danteali.github.io](https://github.com/danteali/danteali.github.io) repo which is used to publish the associated Pages at: https://danteali.github.io/ I believe that you can generate Pages for any repo. Only the above 'special' one will be accessible at the root URL. But if using other repos, after turning on Pages options in settings, they should be published to: `<username>.github.io/<repository>`. Cloned repo to a working dir, e.g. C:\\Scratchpad\\GitHubRepos : bash git clone https://github.com/danteali/danteali.github.io Use working dir as a new Obsidian Vault: GitHub Pages - select the option to use existing Vault (copy main Vault's .obsidian directory to retain settings etc) Place any markdown files in the docs folder. Any subfolders will be treated as 'groups' in the generated table of contents on the site. Even though we have a README.md in the root of the repo, the deployed Pages will start in the docs folder Push changes to github: bash cd <working dir> git add . git commit -m \"Update\" git push origin main The push command uses origin to indicate the default remote repository name, and the last argument should specify the destination branch name. In this case the template we copied uses main as the repo branch name. We can push to any branch name we choose (e.g. if we want to retain a version for rollback later) - github will process the branches named in the ci.yml workflow file below. When changes are pushed to GitHub, Actions are triggered as defined in the ../.github/workflows/ci.yml file. These process the mkdocs.yml configuration and interpret the repo content in line with this. A new branch is created/updated by the Actions. This is called gh-pages . In GitHub repo Settings -> Pages make sure to select the gh-pages branch. If there are any changes in the online GitHub repo which are not reflected in the local working dir (e.g. cloned to NAS instead of desktop and made some changes), we can update the local repo by 're-cloning' or we can pull those changes to the local repo: bash git pull origin main Again, in pull command we need to specify the remote branch name to pull to the local working dir. In fact, Git prevents you from overwriting the central repository\u2019s by refusing to push requests when they result in a non-fast-forward merge. So, if the remote history has diverged from your history, you need to pull the remote branch and merge it into your local one, then try pushing again. Or you can use the git push --force option to force a merge even if the local repo is not consistent with the remote one. The mkdocs.yml file can be amended to further configure the site's theme, colours, etc. See: https://www.mkdocs.org/ Customising Material theme: https://squidfunk.github.io/mkdocs-material/customization/ https://squidfunk.github.io/mkdocs-material/creating-your-site/#advanced-configuration Some themes and extensions listed here: https://hub.docker.com/r/minidocks/mkdocs","title":"Publishing Obsidian Markdown Files in Github Pages"},{"location":"Tech/Publishing%20Obsidian%20Markdown%20Files%20in%20Github%20Pages/#key-takeaways-things-to-remember","text":"","title":"Key Takeaways / Things to Remember"},{"location":"Tech/Publishing%20Obsidian%20Markdown%20Files%20in%20Github%20Pages/#publishing-obsidian-markdown-files-in-github-pages","text":"Another option is just to manually setup and configure your mkdocs.yml file and push the content to GitHub. There are also various docker images for mkdocs, their purpose seems to generally be to publish the static files locally (e.g. for dev/testing) instead of having to push to GitHub first. They may be useful as sources of config data as they seem to generate config files on first run.","title":"Publishing Obsidian Markdown Files in Github Pages"},{"location":"Tech/Publishing%20Obsidian%20Markdown%20Files%20in%20Github%20Pages/#using-an-mkdocs-template","text":"MkDocs is simply a defined configuration and file structure that GitHub recognises and can use to display websites. MkDocs is a fast, simple static site generator (incl theming ) that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. It is supported out of the box by RTD , and can also host the files locally for dev purposes. Someone has made a specific template for MkDocs to work well with Obsidian notes. See: https://github.com/jobindj/obsidian-mkdocs * Copy the repo template to our account (using hyperlink inside source repo). Save in the special [danteali.github.io](https://github.com/danteali/danteali.github.io) repo which is used to publish the associated Pages at: https://danteali.github.io/ I believe that you can generate Pages for any repo. Only the above 'special' one will be accessible at the root URL. But if using other repos, after turning on Pages options in settings, they should be published to: `<username>.github.io/<repository>`. Cloned repo to a working dir, e.g. C:\\Scratchpad\\GitHubRepos : bash git clone https://github.com/danteali/danteali.github.io Use working dir as a new Obsidian Vault: GitHub Pages - select the option to use existing Vault (copy main Vault's .obsidian directory to retain settings etc) Place any markdown files in the docs folder. Any subfolders will be treated as 'groups' in the generated table of contents on the site. Even though we have a README.md in the root of the repo, the deployed Pages will start in the docs folder Push changes to github: bash cd <working dir> git add . git commit -m \"Update\" git push origin main The push command uses origin to indicate the default remote repository name, and the last argument should specify the destination branch name. In this case the template we copied uses main as the repo branch name. We can push to any branch name we choose (e.g. if we want to retain a version for rollback later) - github will process the branches named in the ci.yml workflow file below. When changes are pushed to GitHub, Actions are triggered as defined in the ../.github/workflows/ci.yml file. These process the mkdocs.yml configuration and interpret the repo content in line with this. A new branch is created/updated by the Actions. This is called gh-pages . In GitHub repo Settings -> Pages make sure to select the gh-pages branch. If there are any changes in the online GitHub repo which are not reflected in the local working dir (e.g. cloned to NAS instead of desktop and made some changes), we can update the local repo by 're-cloning' or we can pull those changes to the local repo: bash git pull origin main Again, in pull command we need to specify the remote branch name to pull to the local working dir. In fact, Git prevents you from overwriting the central repository\u2019s by refusing to push requests when they result in a non-fast-forward merge. So, if the remote history has diverged from your history, you need to pull the remote branch and merge it into your local one, then try pushing again. Or you can use the git push --force option to force a merge even if the local repo is not consistent with the remote one. The mkdocs.yml file can be amended to further configure the site's theme, colours, etc. See: https://www.mkdocs.org/ Customising Material theme: https://squidfunk.github.io/mkdocs-material/customization/ https://squidfunk.github.io/mkdocs-material/creating-your-site/#advanced-configuration Some themes and extensions listed here: https://hub.docker.com/r/minidocks/mkdocs","title":"Using an MkDocs template"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/","text":"Tags: #ctf #pentesting #tools #apps Key Takeaways / Things to Remember \u00b6 Check out John Hammond's CTF Katana Tools & Resources \u00b6 Below are details of tools and resources picked up related to pen testing, cyphers, crypto, etc. In particular aimed at solving CTFs, etc Kids Learning \u00b6 Before I forget here are some sites which could be useful for James to learn crypto basics and coding/scripting: * https://blockly.games/maze?lang=en&level=4&skin=1 * https://www.codemonkey.com/ * http://www.crunchzilla.com/code-monster * https://www.cryptoclub.org/#vAllTools * https://www.makewonder.com/robots/dash/ * https://smile.amazon.co.uk/Wonder-Workshop-DA01-Dash-Robot/dp/B00SKURVKY/ref=sr_1_2?dchild=1&keywords=wonder+workshop&qid=1628803680&sr=8-2 Reading \u00b6 CTF Katana (John Hammond) \u00b6 CTF Katana And this Katana tool which automates a bunch of the simple stuff: https://github.com/JohnHammond/katana https://ctf-katana.readthedocs.io/en/latest/ And John's YouTube channel: https://youtu.be/xl2Xx5YOKcI Hacktricks / PEASS (Carlos Polop) \u00b6 https://book.hacktricks.xyz/ https://github.com/carlospolop/PEASS-ng And the DC29 Offensive Security talk: https://www.youtube.com/watch?v=9_fJv_weLU0 https://github.com/swisskyrepo/PayloadsAllTheThings - payload for basically every scenario Good methodology: https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Methodology%20and%20Resources https://cryptokait.com/workshops/national-cyber-league-coaching-guide-v-2-1/ncl-coaching-guide-resources-by-category/ https://cryptokait.com/2020/03/04/a-beginners-guide-to-scanning-with-dirbuster-for-the-ncl-games/ https://capture.tf/files/CTF-Preparation-Guide.pdf LOADS of info on lost of common CFT puzzles incl cyphers https://resources.infosecinstitute.com/topic/tools-of-trade-and-resources-to-prepare-in-a-hacker-ctf-competition-or-challenge/#gref https://www.hacksplaining.com/ https://null-byte.wonderhowto.com/ To-do \u00b6 URL Testing Script \u00b6 todo-low \u00b6 This happened multiple times during the DC29 badge challenge - we had to check for various URL combinations. Write a script to create URL permutations and test for valid URL responses at those locations. Requirements: - should check curl response for non-404s - should have timing capability e.g. how long last response took, avg response, % complete, expected completion - need to be able to pull from file to try - need to be able to generate own paths from permutations of strings. This will do it for us already but can be detected by targets (defcon.org detected my post-conference testing) * Gobuster to enumerate URLs * crunch or 'Combinator' to generate wordlists based on permutations of strings. * Maybe... Screaming Frog Script info/sources/help \u00b6 Generating Permutations * https://stackoverflow.com/questions/47905379/bash-permutation-with-list-of-words * https://stackoverflow.com/questions/3846123/generating-permutations-using-bash * Use the tool \u2018crunch\u2019 to generate permutations: https://pentestlab.blog/2012/07/12/creating-wordlists-with-crunch/ _./crunch 1 1 -p word1 word2 word3_ Checking URLs * https://stackoverflow.com/questions/28099637/how-do-you-bulk-test-url-redirections * https://stackoverflow.com/questions/35644789/bulk-url-checker-macro-excel * https://stackoverflow.com/questions/6136022/script-to-get-the-http-status-code-of-a-list-of-urls * PHP * https://stackoverflow.com/questions/36735364/bulk-link-checker-in-php * https://stackoverflow.com/questions/34173636/trying-to-get-this-php-code-to-work-for-bulk-action * Python * https://stackoverflow.com/questions/53894401/bulk-http-status-requests * https://stackoverflow.com/questions/7152762/how-to-redirect-print-output-to-a-file * https://stackoverflow.com/questions/64724802/python-bulk-httpresponse-check * https://docs.aiohttp.org/en/stable/ Software \u00b6 Kali \u00b6 https://null-byte.wonderhowto.com/how-to/setup-practice-ctfs-from-vulnhub-kali-linux-0170228/ https://www.kali.org/docs/virtualization/install-virtualbox-guest-vm/ https://www.offensive-security.com/metasploit-unleashed/ Ghidra \u00b6 [ghidra](https://github.com/NationalSecurityAgency/ghidra https://www.shogunlab.com/blog/2019/04/12/here-be-dragons-ghidra-0.html https://ghidra.re/courses/GhidraClass/Beginner/Introduction_to_Ghidra_Student_Guide_withNotes.html#Introduction_to_Ghidra_Student_Guide.html Uf2 stuff uf2 plugin https://github.com/kjcolley7/UF2-IDA-Loader https://github.com/fkie-cad/FACT_core https://github.com/Microsoft/uf2#files-exposed-by-bootloaders Cyphers & Bases \u00b6 Common examples in CTFs: * hex * ascii * base-16 * rot 13 * rot 47 * Caesar Cipher * Vigen\u00e8re Cipher (including the autokey variant) * Beaufort Cipher (including the autokey variant) * Playfair Cipher * Two-Square/Double Playfair Cipher Cypher identifiers \u00b6 https://www.boxentriq.com/code-breaking/cipher-identifier https://www.dcode.fr/cipher-identifier Decrypters \u00b6 www.dcode.fr/caesar-cipher www.dcode.fr/vigenere-cipher www.dcode.fr/ascii-code Misc Tools/Toolkits \u00b6 https://github.com/JohnHammond/ctf-katana https://github.com/eugenekolo/sec-tools https://github.com/zardus/ctf-tools Gobuster - URL tester Dirbuster Enum4linux - enumerate services Hydra - password guesser LinPeas - Priv esc awesome script https://github.com/carlospolop/PEASS-ng John the ripper Including how to turn common files into stuff that JTR can run against e.g. id_rsa SSH keys Rock you word lists","title":" Tools & Resources"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#key-takeaways-things-to-remember","text":"Check out John Hammond's CTF Katana","title":"Key Takeaways / Things to Remember"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#tools-resources","text":"Below are details of tools and resources picked up related to pen testing, cyphers, crypto, etc. In particular aimed at solving CTFs, etc","title":"Tools &amp; Resources"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#kids-learning","text":"Before I forget here are some sites which could be useful for James to learn crypto basics and coding/scripting: * https://blockly.games/maze?lang=en&level=4&skin=1 * https://www.codemonkey.com/ * http://www.crunchzilla.com/code-monster * https://www.cryptoclub.org/#vAllTools * https://www.makewonder.com/robots/dash/ * https://smile.amazon.co.uk/Wonder-Workshop-DA01-Dash-Robot/dp/B00SKURVKY/ref=sr_1_2?dchild=1&keywords=wonder+workshop&qid=1628803680&sr=8-2","title":"Kids Learning"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#reading","text":"","title":"Reading"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#ctf-katana-john-hammond","text":"CTF Katana And this Katana tool which automates a bunch of the simple stuff: https://github.com/JohnHammond/katana https://ctf-katana.readthedocs.io/en/latest/ And John's YouTube channel: https://youtu.be/xl2Xx5YOKcI","title":"CTF Katana (John Hammond)"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#hacktricks-peass-carlos-polop","text":"https://book.hacktricks.xyz/ https://github.com/carlospolop/PEASS-ng And the DC29 Offensive Security talk: https://www.youtube.com/watch?v=9_fJv_weLU0 https://github.com/swisskyrepo/PayloadsAllTheThings - payload for basically every scenario Good methodology: https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Methodology%20and%20Resources https://cryptokait.com/workshops/national-cyber-league-coaching-guide-v-2-1/ncl-coaching-guide-resources-by-category/ https://cryptokait.com/2020/03/04/a-beginners-guide-to-scanning-with-dirbuster-for-the-ncl-games/ https://capture.tf/files/CTF-Preparation-Guide.pdf LOADS of info on lost of common CFT puzzles incl cyphers https://resources.infosecinstitute.com/topic/tools-of-trade-and-resources-to-prepare-in-a-hacker-ctf-competition-or-challenge/#gref https://www.hacksplaining.com/ https://null-byte.wonderhowto.com/","title":"Hacktricks / PEASS (Carlos Polop)"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#to-do","text":"","title":"To-do"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#url-testing-script","text":"","title":"URL Testing Script"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#todo-low","text":"This happened multiple times during the DC29 badge challenge - we had to check for various URL combinations. Write a script to create URL permutations and test for valid URL responses at those locations. Requirements: - should check curl response for non-404s - should have timing capability e.g. how long last response took, avg response, % complete, expected completion - need to be able to pull from file to try - need to be able to generate own paths from permutations of strings. This will do it for us already but can be detected by targets (defcon.org detected my post-conference testing) * Gobuster to enumerate URLs * crunch or 'Combinator' to generate wordlists based on permutations of strings. * Maybe... Screaming Frog","title":"todo-low"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#script-infosourceshelp","text":"Generating Permutations * https://stackoverflow.com/questions/47905379/bash-permutation-with-list-of-words * https://stackoverflow.com/questions/3846123/generating-permutations-using-bash * Use the tool \u2018crunch\u2019 to generate permutations: https://pentestlab.blog/2012/07/12/creating-wordlists-with-crunch/ _./crunch 1 1 -p word1 word2 word3_ Checking URLs * https://stackoverflow.com/questions/28099637/how-do-you-bulk-test-url-redirections * https://stackoverflow.com/questions/35644789/bulk-url-checker-macro-excel * https://stackoverflow.com/questions/6136022/script-to-get-the-http-status-code-of-a-list-of-urls * PHP * https://stackoverflow.com/questions/36735364/bulk-link-checker-in-php * https://stackoverflow.com/questions/34173636/trying-to-get-this-php-code-to-work-for-bulk-action * Python * https://stackoverflow.com/questions/53894401/bulk-http-status-requests * https://stackoverflow.com/questions/7152762/how-to-redirect-print-output-to-a-file * https://stackoverflow.com/questions/64724802/python-bulk-httpresponse-check * https://docs.aiohttp.org/en/stable/","title":"Script info/sources/help"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#software","text":"","title":"Software"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#kali","text":"https://null-byte.wonderhowto.com/how-to/setup-practice-ctfs-from-vulnhub-kali-linux-0170228/ https://www.kali.org/docs/virtualization/install-virtualbox-guest-vm/ https://www.offensive-security.com/metasploit-unleashed/","title":"Kali"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#ghidra","text":"[ghidra](https://github.com/NationalSecurityAgency/ghidra https://www.shogunlab.com/blog/2019/04/12/here-be-dragons-ghidra-0.html https://ghidra.re/courses/GhidraClass/Beginner/Introduction_to_Ghidra_Student_Guide_withNotes.html#Introduction_to_Ghidra_Student_Guide.html Uf2 stuff uf2 plugin https://github.com/kjcolley7/UF2-IDA-Loader https://github.com/fkie-cad/FACT_core https://github.com/Microsoft/uf2#files-exposed-by-bootloaders","title":"Ghidra"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#cyphers-bases","text":"Common examples in CTFs: * hex * ascii * base-16 * rot 13 * rot 47 * Caesar Cipher * Vigen\u00e8re Cipher (including the autokey variant) * Beaufort Cipher (including the autokey variant) * Playfair Cipher * Two-Square/Double Playfair Cipher","title":"Cyphers &amp; Bases"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#cypher-identifiers","text":"https://www.boxentriq.com/code-breaking/cipher-identifier https://www.dcode.fr/cipher-identifier","title":"Cypher identifiers"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#decrypters","text":"www.dcode.fr/caesar-cipher www.dcode.fr/vigenere-cipher www.dcode.fr/ascii-code","title":"Decrypters"},{"location":"Tech/InfoSec/_Tools%20%26%20Resources/#misc-toolstoolkits","text":"https://github.com/JohnHammond/ctf-katana https://github.com/eugenekolo/sec-tools https://github.com/zardus/ctf-tools Gobuster - URL tester Dirbuster Enum4linux - enumerate services Hydra - password guesser LinPeas - Priv esc awesome script https://github.com/carlospolop/PEASS-ng John the ripper Including how to turn common files into stuff that JTR can run against e.g. id_rsa SSH keys Rock you word lists","title":"Misc Tools/Toolkits"},{"location":"Tech/InfoSec/Tools/CTF%20Katana/","text":"Tags: #tools #ctf #pentesting #infosec #kali Key Takeaways / Things to Remember \u00b6 Couldn't get working! The CTF Katana notes repo is an excellent resource: https://github.com/JohnHammond/ctf-katana And reading the code/info in the tool site can give insight on how to use the various tools. Katana \u00b6 Docs Also see this repo which John used to document lots of notes related to CTFs: CTF Katana Attempts to offer code and material to automate \"running through the check-list\" or hitting the \"low-hanging fruit\" in a Capture the Flag challenge. May be slightly outdated now but still useful. Clone the repo to a useful location and run setup: cd ~/working/tools git clone https://github.com/JohnHammond/katana Install dependencies - including a bunch of tools useful in CTFs: sudo apt update sudo apt-get install -y python3-venv python-tk tk-dev libffi-dev libssl-dev pandoc \\ libgmp3-dev libzbar-dev tesseract-ocr xsel libpoppler-cpp-dev libmpc-dev \\ libdbus-glib-1-dev ruby apktool nodejs groff binwalk \\ foremost tcpflow poppler-utils exiftool steghide stegsnow bison ffmpeg \\ libgd-dev less Setup (may need to change python command to reflect the python3 version installed - should be >3.7): python3.9 -m venv env source env/bin/activate python setup.py install Above commands do: - Create a python virtual environment in cd ~/working/tools/katana - new env folder now exists in directory. If setup fails we can simply remove the virtual environment and start again by deleting env - Activate the environment - deactivate with deactivate - Run setup script COULDN'T GET WORKING LOCALLY IN KALI - KEPT GETTING ERRORS DURING SETUP \u00b6 Docker \u00b6 Build Image A docker build is also available which is probably easier. Build the image using the dockerfile inside the docker directory. bash docker build -t katana . Note that build fails due to missing package: libenchant-dev \u00b6 Docker doesn't come bundled with Kali. To install docker: bash sudo apt-get install docker Then create a docker group (it likely already exists after install - check with less /etc/groups ) and add user to the group to allow running docker commands without sudo: bash sudo groupadd docker sudo usermod -aG docker $USER Logout and login again, or run this command to process group change without relogging: newgrp docker Configuration Add a katana.ini file to the docker data directory, containing: [manager] flag-format=FLAG{.*?} # Output directory outdir=./results See full details about config file here The config file can be updated to reflect the current flag format being used in any given challenge. Run docker container bash docker run -v \"~/working/tools/katana/docker_data:/data\" -it katana Process files Target files can be placed in the targets directory and Katana will automatically detect the target type and attempt to solve common CTF challenges e.g. finding data inside an image, pull data from a PCAP file, ...","title":"CTF Katana"},{"location":"Tech/InfoSec/Tools/CTF%20Katana/#key-takeaways-things-to-remember","text":"Couldn't get working! The CTF Katana notes repo is an excellent resource: https://github.com/JohnHammond/ctf-katana And reading the code/info in the tool site can give insight on how to use the various tools.","title":"Key Takeaways / Things to Remember"},{"location":"Tech/InfoSec/Tools/CTF%20Katana/#katana","text":"Docs Also see this repo which John used to document lots of notes related to CTFs: CTF Katana Attempts to offer code and material to automate \"running through the check-list\" or hitting the \"low-hanging fruit\" in a Capture the Flag challenge. May be slightly outdated now but still useful. Clone the repo to a useful location and run setup: cd ~/working/tools git clone https://github.com/JohnHammond/katana Install dependencies - including a bunch of tools useful in CTFs: sudo apt update sudo apt-get install -y python3-venv python-tk tk-dev libffi-dev libssl-dev pandoc \\ libgmp3-dev libzbar-dev tesseract-ocr xsel libpoppler-cpp-dev libmpc-dev \\ libdbus-glib-1-dev ruby apktool nodejs groff binwalk \\ foremost tcpflow poppler-utils exiftool steghide stegsnow bison ffmpeg \\ libgd-dev less Setup (may need to change python command to reflect the python3 version installed - should be >3.7): python3.9 -m venv env source env/bin/activate python setup.py install Above commands do: - Create a python virtual environment in cd ~/working/tools/katana - new env folder now exists in directory. If setup fails we can simply remove the virtual environment and start again by deleting env - Activate the environment - deactivate with deactivate - Run setup script","title":"Katana"},{"location":"Tech/InfoSec/Tools/CTF%20Katana/#couldnt-get-working-locally-in-kali-kept-getting-errors-during-setup","text":"","title":"COULDN'T GET WORKING LOCALLY IN KALI - KEPT GETTING ERRORS DURING SETUP"},{"location":"Tech/InfoSec/Tools/CTF%20Katana/#docker","text":"Build Image A docker build is also available which is probably easier. Build the image using the dockerfile inside the docker directory. bash docker build -t katana .","title":"Docker"},{"location":"Tech/InfoSec/Tools/CTF%20Katana/#note-that-build-fails-due-to-missing-package-libenchant-dev","text":"Docker doesn't come bundled with Kali. To install docker: bash sudo apt-get install docker Then create a docker group (it likely already exists after install - check with less /etc/groups ) and add user to the group to allow running docker commands without sudo: bash sudo groupadd docker sudo usermod -aG docker $USER Logout and login again, or run this command to process group change without relogging: newgrp docker Configuration Add a katana.ini file to the docker data directory, containing: [manager] flag-format=FLAG{.*?} # Output directory outdir=./results See full details about config file here The config file can be updated to reflect the current flag format being used in any given challenge. Run docker container bash docker run -v \"~/working/tools/katana/docker_data:/data\" -it katana Process files Target files can be placed in the targets directory and Katana will automatically detect the target type and attempt to solve common CTF challenges e.g. finding data inside an image, pull data from a PCAP file, ...","title":"Note that build fails due to missing package: libenchant-dev"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/","text":"Tags: #tools #ctf #pentesting #infosec #kali #cypher #encoded #code #base #steganography Key Takeaways / Things to Remember \u00b6 See extensive lists at these links - below are common ones more likely to encounter: https://book.hacktricks.xyz/crypto/crypto-ctfs-tricks#encoders https://github.com/JohnHammond/ctf-katana#esoteric-languages Useful Tools: * Multiple decoding tools: https://cryptii.com * More decoding tools (including cypher identifier): www.dcode.fr * Check all bases with: https://github.com/mufeedvh/basecrack * Convert from multiple systems: https://gchq.github.io/CyberChef/ Common Codes & Cyphers \u00b6 Featherbuster by NCC Group can be used to help determine and solve codes. Bases \u00b6 Check all bases with: https://github.com/mufeedvh/basecrack And the wiki shows some obscure binary to ascii conversions: https://www.wikiwand.com/en/Binary-to-text_encoding Base 2 / Binary \u00b6 [0-1] Base 8 / Octal \u00b6 [0-8] Base16 / Hexidecimal \u00b6 [0-9A-F] Example: Hey! This is an example of base16 encoding. is: 48657921205468697320697320616E206578616D706C65206F662062617365313620656E636F64696E672E Decode with: https://simplycalc.com/base16-encode.php Base32 \u00b6 [ A-Z2-7= ] Often ends with a multiple = to pad remaining text. Example: NBXWYYLDMFZGCY3PNRQQ==== Decode at: https://simplycalc.com/base32-encode.php Base58 \u00b6 [ 123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz ] Example: 2yJiRg5BF9gmsU6AC Base62 \u00b6 [ 0-9A-Za-z ] Example: g2AextRZpBKRBzQ9 Base64 \u00b6 [ A-Za-z0-9+/= ] Often ends with a multiple = to pad remaining text. Example: aG9sYWNhcmFjb2xh Linux base64 -w0 <file> #Encode file base64 -d file #Decode file Windows certutil -encode payload.dll payload.b64 certutil -decode payload.b64 payload.dll Base85 --> Like Ascii85 \u00b6 Morse Code \u00b6 Example: .... --- .-.. -.-. .- .-. .- -.-. --- .-.. .- Decode at: * https://morsecode.scphillips.com/translator.html * https://gchq.github.io/CyberChef/ Phone Keypad \u00b6 DNA \u00b6 When given a sequence with only A, C, G, T , there is an online mapping for these. Try this: QR Codes \u00b6 Hashes \u00b6 MD% / SHA1 / SHA256 / SHA512 \u00b6 Generate hashes here: https://passwordsgenerator.net/sha512-hash-generator/ Cyphers \u00b6 Keyboard Shift \u00b6 If you see any thing that has the shape of a sentence but it looks like nonsense letters, and notes some shift left or right, it may be a keyboard shift... Decode at: https://www.dcode.fr/keyboard-shift-cipher Bit Shift \u00b6 Sometimes the letters may be shifted by a stated hint, like a binary bit shift ( x >> 1 ) or ( x << 1 ). Reversed Text \u00b6 Sometimes a \"ciphertext\" is just as easy as reversed text. Don't forgot to check under this rock! You can reverse a string in Python like so: \"UOYMORFEDIHOTGNIYRTEBTHGIMFTCA.TAHTTERCESASISIHT\"[::-1] Simple Substitution \u00b6 This is simply substituting the letter for the corresponding number in the alphabet. It's a Ceasar Cypher with no shift key. Ceasar \u00b6 The most classic shift cipher. Substitute the letter for the alphabet number and shift by X. Here's a one liner to try all letter positions: cipher='jeoi{geiwev_gmtliv_ws_svmkmrep}' ; for i in {0..25}; do echo $cipher | caesar $i; done Decode at: www.dcode.fr/caesar-cipher ROT 13 \u00b6 This is a Ceasar Cypher with a shift/key of 13. ROT-47 is common too apparently. Vigenere \u00b6 A keyword is needed wodsyoidrods Decode at: - https://www.guballa.de/vigenere-solver - https://www.dcode.fr/vigenere-cipher - https://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx Steganography \u00b6 Lots of useful tools, some online. See notes here: https://github.com/JohnHammond/ctf-katana#steganography Notable tools: * steghide A command-line tool typically used alongside a password or key, that could be uncovered some other way when solving a challenge. - StegSeek This is similar to stegcracker , but much faster. Can also extract metadata without a password list. - StegCracker Don't ever forget about steghide ! This tool can use a password list like rockyou.txt with steghide. SOME IMAGES CAN HAVE MULTIPLE FILED ENCODED WITH MULTIPLE PASSWORDS. - Steganography Online A tool often used in CTFs for encoding messages into images. - Stegsolve.jar A Java .JAR tool, that will open an image and let you as the user arrow through different renditions of the image (viewing color channels, inverted colors, and more). The tool is surprisingly useful. - openstego A Java .JAR tool, that can extract data from an image. A good tool to use on guessing challenges, when you don't have any other leads. We found this tool after the Misc50 challenge from HackIM 2018 - zsteg Command-line tool for use against Least Significant Bit steganography... unfortunately only works against PNG and BMP images. - jsteg Another command-line tool to use against JPEG images. Handy for Hackerrank Codefest CTF 2018. - Jstego A GUI tool for JPG steganography. https://sourceforge.net/projects/jstego/ It is a Java JAR file similar to stegsolve.jar","title":"Common Codes & Cyphers"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#key-takeaways-things-to-remember","text":"See extensive lists at these links - below are common ones more likely to encounter: https://book.hacktricks.xyz/crypto/crypto-ctfs-tricks#encoders https://github.com/JohnHammond/ctf-katana#esoteric-languages Useful Tools: * Multiple decoding tools: https://cryptii.com * More decoding tools (including cypher identifier): www.dcode.fr * Check all bases with: https://github.com/mufeedvh/basecrack * Convert from multiple systems: https://gchq.github.io/CyberChef/","title":"Key Takeaways / Things to Remember"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#common-codes-cyphers","text":"Featherbuster by NCC Group can be used to help determine and solve codes.","title":"Common Codes &amp; Cyphers"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#bases","text":"Check all bases with: https://github.com/mufeedvh/basecrack And the wiki shows some obscure binary to ascii conversions: https://www.wikiwand.com/en/Binary-to-text_encoding","title":"Bases"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#base-2-binary","text":"[0-1]","title":"Base 2 / Binary"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#base-8-octal","text":"[0-8]","title":"Base 8 / Octal"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#base16-hexidecimal","text":"[0-9A-F] Example: Hey! This is an example of base16 encoding. is: 48657921205468697320697320616E206578616D706C65206F662062617365313620656E636F64696E672E Decode with: https://simplycalc.com/base16-encode.php","title":"Base16 / Hexidecimal"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#base32","text":"[ A-Z2-7= ] Often ends with a multiple = to pad remaining text. Example: NBXWYYLDMFZGCY3PNRQQ==== Decode at: https://simplycalc.com/base32-encode.php","title":"Base32"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#base58","text":"[ 123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz ] Example: 2yJiRg5BF9gmsU6AC","title":"Base58"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#base62","text":"[ 0-9A-Za-z ] Example: g2AextRZpBKRBzQ9","title":"Base62"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#base64","text":"[ A-Za-z0-9+/= ] Often ends with a multiple = to pad remaining text. Example: aG9sYWNhcmFjb2xh Linux base64 -w0 <file> #Encode file base64 -d file #Decode file Windows certutil -encode payload.dll payload.b64 certutil -decode payload.b64 payload.dll","title":"Base64"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#base85-like-ascii85","text":"","title":"Base85 --&gt; Like Ascii85"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#morse-code","text":"Example: .... --- .-.. -.-. .- .-. .- -.-. --- .-.. .- Decode at: * https://morsecode.scphillips.com/translator.html * https://gchq.github.io/CyberChef/","title":"Morse Code"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#phone-keypad","text":"","title":"Phone Keypad"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#dna","text":"When given a sequence with only A, C, G, T , there is an online mapping for these. Try this:","title":"DNA"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#qr-codes","text":"","title":"QR Codes"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#hashes","text":"","title":"Hashes"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#md-sha1-sha256-sha512","text":"Generate hashes here: https://passwordsgenerator.net/sha512-hash-generator/","title":"MD% / SHA1 / SHA256 / SHA512"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#cyphers","text":"","title":"Cyphers"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#keyboard-shift","text":"If you see any thing that has the shape of a sentence but it looks like nonsense letters, and notes some shift left or right, it may be a keyboard shift... Decode at: https://www.dcode.fr/keyboard-shift-cipher","title":"Keyboard Shift"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#bit-shift","text":"Sometimes the letters may be shifted by a stated hint, like a binary bit shift ( x >> 1 ) or ( x << 1 ).","title":"Bit Shift"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#reversed-text","text":"Sometimes a \"ciphertext\" is just as easy as reversed text. Don't forgot to check under this rock! You can reverse a string in Python like so: \"UOYMORFEDIHOTGNIYRTEBTHGIMFTCA.TAHTTERCESASISIHT\"[::-1]","title":"Reversed Text"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#simple-substitution","text":"This is simply substituting the letter for the corresponding number in the alphabet. It's a Ceasar Cypher with no shift key.","title":"Simple Substitution"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#ceasar","text":"The most classic shift cipher. Substitute the letter for the alphabet number and shift by X. Here's a one liner to try all letter positions: cipher='jeoi{geiwev_gmtliv_ws_svmkmrep}' ; for i in {0..25}; do echo $cipher | caesar $i; done Decode at: www.dcode.fr/caesar-cipher","title":"Ceasar"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#rot-13","text":"This is a Ceasar Cypher with a shift/key of 13. ROT-47 is common too apparently.","title":"ROT 13"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#vigenere","text":"A keyword is needed wodsyoidrods Decode at: - https://www.guballa.de/vigenere-solver - https://www.dcode.fr/vigenere-cipher - https://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx","title":"Vigenere"},{"location":"Tech/InfoSec/Tools/Common%20Codes%20%26%20Cyphers/#steganography","text":"Lots of useful tools, some online. See notes here: https://github.com/JohnHammond/ctf-katana#steganography Notable tools: * steghide A command-line tool typically used alongside a password or key, that could be uncovered some other way when solving a challenge. - StegSeek This is similar to stegcracker , but much faster. Can also extract metadata without a password list. - StegCracker Don't ever forget about steghide ! This tool can use a password list like rockyou.txt with steghide. SOME IMAGES CAN HAVE MULTIPLE FILED ENCODED WITH MULTIPLE PASSWORDS. - Steganography Online A tool often used in CTFs for encoding messages into images. - Stegsolve.jar A Java .JAR tool, that will open an image and let you as the user arrow through different renditions of the image (viewing color channels, inverted colors, and more). The tool is surprisingly useful. - openstego A Java .JAR tool, that can extract data from an image. A good tool to use on guessing challenges, when you don't have any other leads. We found this tool after the Misc50 challenge from HackIM 2018 - zsteg Command-line tool for use against Least Significant Bit steganography... unfortunately only works against PNG and BMP images. - jsteg Another command-line tool to use against JPEG images. Handy for Hackerrank Codefest CTF 2018. - Jstego A GUI tool for JPG steganography. https://sourceforge.net/projects/jstego/ It is a Java JAR file similar to stegsolve.jar","title":"Steganography"},{"location":"Tech/InfoSec/Tools/Common%20Cryptography/","text":"Tags: #tools #ctf #pentesting #infosec #kali #cryptography #crypto Common Cryptography \u00b6 Sources https://book.hacktricks.xyz/crypto/crypto-ctfs-tricks#easy-crypto https://www.boxentriq.com/code-breaking/cipher-identifier https://www.dcode.fr/cipher-identifier XOR \u00b6 The basic idea behind XOR \u2013 encryption is, if you don\u2019t know the XOR-encryption key before decrypting the encrypted data, it is impossible to decrypt the data. https://wiremask.eu/tools/xor-cracker/ Bifid \u00b6 A keyword is needed fgaargaamnlunesuneoa Fernet \u00b6 2 base64 strings (token and key) Token: gAAAAABWC9P7-9RsxTz_dwxh9-O2VUB7Ih8UCQL1_Zk4suxnkCvb26Ie4i8HSUJ4caHZuiNtjLl3qfmCv_fS3_VpjL7HxCz7_Q== Key: -s6eI5hyNh8liH7Gq0urPC-vzPgNnxauKvRO4g03oYI= https://asecuritysite.com/encryption/ferdecode Samir Secret Sharing \u00b6 A secret is split in X parts and to recover it you need Y parts ( Y <=X ). 8019f8fa5879aa3e07858d08308dc1a8b45 80223035713295bddf0b0bd1b10a5340b89 803bc8cf294b3f83d88e86d9818792e80cd * http://christian.gen.co/secrets/","title":"Common Cryptography"},{"location":"Tech/InfoSec/Tools/Common%20Cryptography/#common-cryptography","text":"Sources https://book.hacktricks.xyz/crypto/crypto-ctfs-tricks#easy-crypto https://www.boxentriq.com/code-breaking/cipher-identifier https://www.dcode.fr/cipher-identifier","title":"Common Cryptography"},{"location":"Tech/InfoSec/Tools/Common%20Cryptography/#xor","text":"The basic idea behind XOR \u2013 encryption is, if you don\u2019t know the XOR-encryption key before decrypting the encrypted data, it is impossible to decrypt the data. https://wiremask.eu/tools/xor-cracker/","title":"XOR"},{"location":"Tech/InfoSec/Tools/Common%20Cryptography/#bifid","text":"A keyword is needed fgaargaamnlunesuneoa","title":"Bifid"},{"location":"Tech/InfoSec/Tools/Common%20Cryptography/#fernet","text":"2 base64 strings (token and key) Token: gAAAAABWC9P7-9RsxTz_dwxh9-O2VUB7Ih8UCQL1_Zk4suxnkCvb26Ie4i8HSUJ4caHZuiNtjLl3qfmCv_fS3_VpjL7HxCz7_Q== Key: -s6eI5hyNh8liH7Gq0urPC-vzPgNnxauKvRO4g03oYI= https://asecuritysite.com/encryption/ferdecode","title":"Fernet"},{"location":"Tech/InfoSec/Tools/Common%20Cryptography/#samir-secret-sharing","text":"A secret is split in X parts and to recover it you need Y parts ( Y <=X ). 8019f8fa5879aa3e07858d08308dc1a8b45 80223035713295bddf0b0bd1b10a5340b89 803bc8cf294b3f83d88e86d9818792e80cd * http://christian.gen.co/secrets/","title":"Samir Secret Sharing"},{"location":"Tech/InfoSec/Tools/ExifTool/","text":"Tags: #tools #ctf #pentesting #infosec #kali ExifTool \u00b6 Displays exif info on the command line. CTFs commonly hide data in the EXIF part of images and/or audio files. If you have an image where the data you need is covered, try viewing the thumbnail: exiftool -b -ThumbnailImage my_image.jpg > my_thumbnail.jpg","title":"ExifTool"},{"location":"Tech/InfoSec/Tools/ExifTool/#exiftool","text":"Displays exif info on the command line. CTFs commonly hide data in the EXIF part of images and/or audio files. If you have an image where the data you need is covered, try viewing the thumbnail: exiftool -b -ThumbnailImage my_image.jpg > my_thumbnail.jpg","title":"ExifTool"},{"location":"Tech/InfoSec/Tools/Gobuster%20%26%20Dirbuster/","text":"Tags: #tools #ctf #pentesting #infosec #kali #enumeration URL Response Codes \u00b6 Just a quick reminder before we get into the meat of this: - 100 Continue - Codes in the 100 range indicate that, for some reason, the client request has not been completed and the client should continue. - 200 Successful - Codes in the 200 range generally mean the request was successful. - 300 Multiple Choices - Codes in the 300 range can mean many things, but generally they mean that the request was not completed. - 400 Bad Request - The codes in the 400 range generally signal a bad request. The most common is the 404 (not found) and 403 (forbidden). Gobuster & Dirbuster \u00b6 Tools for enumerating URLs and directory trees. Handy in CTFs and pentesting to find valid targets. Dirbuster \u00b6 Comes bundled with Kali and has a GUI :) GUI is pretty self-explainatory. Note that when testing the Defcon29 badge challenge URL enumeration (see wordlist generation at DC29 wordlist ), defcon.org detected and blocked attempts. Suspect my test rate was too high so start LOW. Wordlists * See note: Wordlists * The app comes along with some wordlists for checking, these are detailed in the GUI. * Kali also has some specific wordlists for directories at /usr/share/wordlists/dirb/ and /usr/share/wordlists/dirbuster/ Sources: https://cryptokait.com/2020/03/04/a-beginners-guide-to-scanning-with-dirbuster-for-the-ncl-games/ https://null-byte.wonderhowto.com/how-to/hack-like-pro-find-directories-websites-using-dirbuster-0157593/ Gobuster \u00b6 Command line only. Couple of mode options: - dir - the classic directory brute-forcing mode - dns - DNS subdomain brute-forcing mode Examples A. General use to find directories of websites gobuster dir -f -u https://defcon.org/signal/YourJourneyBegins/AlphabetShift/SandsSaharaAladdin/MC56F8006VLC/ -w DC29_badge.txt -o gobuster.txt [--delay 1000ms] -u target URL -w wordlist -o output to file -f (optional) append / to each URL --delay 1000ms (optional) if target is limiting or refusing connections, add/increase delay B. Find specific file types gobuster dir -v -e -u http://192.168.1.105/dvwa -w /usr/share/wordlists/dirb/common.txt -x .php -e print full path of the files -u target URL -w wordlist -v verbose output -x specify file type C. Specify username & password to access resource gobuster dir -v -e -u http://192.168.1.105/dvwa -w /usr/share/wordlists/dirb/common.txt -U test -P test -e print full path of the files -u target URL -w wordlist -v verbose output -U username -P password D. Specify specific codes gobuster dir -v -e -u http://192.168.1.105/dvwa -w /usr/share/wordlists/dirb/common.txt -s 301,200 -e print full path of the files -u target URL -w wordlist -v verbose output -U username -P password Sources: https://null-byte.wonderhowto.com/how-to/scan-websites-for-interesting-directories-files-with-gobuster-0197226/ https://www.securitynewspaper.com/2019/11/04/bruteforce-any-website-with-gobuster-step-by-step-guide/","title":"Gobuster & Dirbuster"},{"location":"Tech/InfoSec/Tools/Gobuster%20%26%20Dirbuster/#url-response-codes","text":"Just a quick reminder before we get into the meat of this: - 100 Continue - Codes in the 100 range indicate that, for some reason, the client request has not been completed and the client should continue. - 200 Successful - Codes in the 200 range generally mean the request was successful. - 300 Multiple Choices - Codes in the 300 range can mean many things, but generally they mean that the request was not completed. - 400 Bad Request - The codes in the 400 range generally signal a bad request. The most common is the 404 (not found) and 403 (forbidden).","title":"URL Response Codes"},{"location":"Tech/InfoSec/Tools/Gobuster%20%26%20Dirbuster/#gobuster-dirbuster","text":"Tools for enumerating URLs and directory trees. Handy in CTFs and pentesting to find valid targets.","title":"Gobuster &amp; Dirbuster"},{"location":"Tech/InfoSec/Tools/Gobuster%20%26%20Dirbuster/#dirbuster","text":"Comes bundled with Kali and has a GUI :) GUI is pretty self-explainatory. Note that when testing the Defcon29 badge challenge URL enumeration (see wordlist generation at DC29 wordlist ), defcon.org detected and blocked attempts. Suspect my test rate was too high so start LOW. Wordlists * See note: Wordlists * The app comes along with some wordlists for checking, these are detailed in the GUI. * Kali also has some specific wordlists for directories at /usr/share/wordlists/dirb/ and /usr/share/wordlists/dirbuster/ Sources: https://cryptokait.com/2020/03/04/a-beginners-guide-to-scanning-with-dirbuster-for-the-ncl-games/ https://null-byte.wonderhowto.com/how-to/hack-like-pro-find-directories-websites-using-dirbuster-0157593/","title":"Dirbuster"},{"location":"Tech/InfoSec/Tools/Gobuster%20%26%20Dirbuster/#gobuster","text":"Command line only. Couple of mode options: - dir - the classic directory brute-forcing mode - dns - DNS subdomain brute-forcing mode Examples A. General use to find directories of websites gobuster dir -f -u https://defcon.org/signal/YourJourneyBegins/AlphabetShift/SandsSaharaAladdin/MC56F8006VLC/ -w DC29_badge.txt -o gobuster.txt [--delay 1000ms] -u target URL -w wordlist -o output to file -f (optional) append / to each URL --delay 1000ms (optional) if target is limiting or refusing connections, add/increase delay B. Find specific file types gobuster dir -v -e -u http://192.168.1.105/dvwa -w /usr/share/wordlists/dirb/common.txt -x .php -e print full path of the files -u target URL -w wordlist -v verbose output -x specify file type C. Specify username & password to access resource gobuster dir -v -e -u http://192.168.1.105/dvwa -w /usr/share/wordlists/dirb/common.txt -U test -P test -e print full path of the files -u target URL -w wordlist -v verbose output -U username -P password D. Specify specific codes gobuster dir -v -e -u http://192.168.1.105/dvwa -w /usr/share/wordlists/dirb/common.txt -s 301,200 -e print full path of the files -u target URL -w wordlist -v verbose output -U username -P password Sources: https://null-byte.wonderhowto.com/how-to/scan-websites-for-interesting-directories-files-with-gobuster-0197226/ https://www.securitynewspaper.com/2019/11/04/bruteforce-any-website-with-gobuster-step-by-step-guide/","title":"Gobuster"},{"location":"Tech/InfoSec/Tools/John%20The%20Ripper/","text":"Tags: #tools #ctf #pentesting #infosec #kali #passwords #brute-force More brute-forcing info can be found at: https://book.hacktricks.xyz/brute-force John The Ripper \u00b6 John can be used to crack passwords! It is similar to hashcat but seems more user-friendly (maybe). Obviously running in a VM means it will be SLOW! It has a LOT of options so worth checking the readme online for specific use cases. And the examples . While quite old, there is a good cheat sheet here: https://countuponsecurity.files.wordpress.com/2016/09/jtr-cheat-sheet.pdf Linux \u00b6 It comes bundled with Kail, the binary is at: /usr/sbin/john Additional tools are saved in /usr/share/john . These are mainly used to convert various output into a form usable for John. e.g. convert windows hash dumps into john's format. Windows \u00b6 For a Windows install, see https://kalitut.com/john-the-ripper/. Essentially we need to use cygwin and download a pre-compiled binary from here . Just download the binary and extract somewhere local, then access from MobaXterm or WSL. e.g. command from MobaXterm to run binary extracted in downloads folder: /drives/c/Users/Ryan/Downloads/winX64_1_JtR/JtR/run/john --test Usage \u00b6 If you just run John against a file it will look for hashes and try to crack them: john <target_file> It will first try \"single crack\" mode, then use a wordlist with rules, and finally go for \"incremental\" mode. See modes for more details. You can specify specific 'modes' to use with e.g. john --single passwd_file You can obviously specify lots of options when using John e.g. specify a wordlist (John's default wordlist is at: /usr/share/john/password.lst ) with below command. (The --rules options tells John to use mangling rules on the words in the list and try the mangled versions too.) john --wordlist=password.lst --rules mypasswd You can actually generate the output of the --rules as applied to a wordlist (without attempting any cracking) with: john --wordlist=<wordlist file> --rules --stdout > rules_applied.txt You can also specify the algorithm to use with --format if you know what algorithm is needed for your hash. By specifying an algorithm you can make John use the GPU in some instances which will be faster than CPU based cracking. You can list all available formats with (the 'opencl' ones are GPU based): john --list=formats If you've cracked some passwords, they are stored in ~/.john/john.pot . The john.pot file is not meant to be human-friendly. You should be using John itself to display the contents of its \"pot file\" in a convenient format: john --show mypasswd You can also start John in it's own background process with the --session=<name> option. And check the status at any time with: john --status Status \u00b6 John will occasionally report it's status, or status can be requested using above command. The output looks like: 0g 0:00:09:01 30.00% 1/3 (ETA: 22:54:26) 0g/s 20.71p/s 20.71c/s 20.71C/s This means: successful guess count (\"g\"), session duration (in the D:HH:MM:SS format for days, hours, minutes, and seconds), progress indicator (percent done and optionally pass number out of the total number of passes), The four speed metrics are: g/s is successful guesses per second (so it'll stay at 0 until at least one password is cracked), p/s is candidate passwords tested per second, c/s is \"crypts\" (password hash or cipher computations) per second, C/s is combinations of candidate password and target hash per second. Benchmarks \u00b6 You can also run a benchmark/test command to see how well your system is expected to perform: john --test This also shows the sheer variety of hashes that john can attempt to crack! Examples: A. Cracking passphrase for SSH keys For example if we had someone's private key but not the passphrase so still can't use it to access the target server. For testing, I generated a new keypair with passphrase test . The keypair is just saved as default id_rsa filenames. These were copied to a working dir for playing with. Run ssh2john on the id_rsa private key file: /usr/share/john/ssh2john.py ~/working/john/ssh/id_rsa > id_rsa.john Then run john itself against the output to see if we can get the password. Using john's default wordlist (see below example for custom wordlist): john id_rsa.john Once complete we can view results with: john --show id_rsa.john B. Running against Linux password file In linux all hashed passwords are saved in /etc/shadow along with other details like date of last password change etc. If you have access to both the /etc/passwd and /etc/shadow files, we can use unshadow to combine their info so that all user/password info is in one file. This will help john be more efficient as it can use some of the data in /etc/passwd to help inform some of it's password guesses. John will work against /etc/shadow even without doing unshadow first. sudo unshadow /etc/passwd /etc/shadow > unshadowed Then run John against it using the Rock You Wordlist wordlist: john --wordlist=/usr/share/wordlists/rockyou.txt --rules unshadowed And view any results with: john --show unshadowed C. Cracking Windows Password Hashes Still to document. See: https://null-byte.wonderhowto.com/how-to/use-john-ripper-metasploit-quickly-crack-windows-hashes-0200322/ https://www.securitynewspaper.com/2018/11/27/crack-windows-password-with-john-the-ripper/ Sources: https://www.hackingarticles.in/beginner-guide-john-the-ripper-part-1/ https://www.binarytides.com/cracking-linux-password-with-john-the-ripper-tutorial/ https://miloserdov.org/?p=4961","title":"John The Ripper"},{"location":"Tech/InfoSec/Tools/John%20The%20Ripper/#john-the-ripper","text":"John can be used to crack passwords! It is similar to hashcat but seems more user-friendly (maybe). Obviously running in a VM means it will be SLOW! It has a LOT of options so worth checking the readme online for specific use cases. And the examples . While quite old, there is a good cheat sheet here: https://countuponsecurity.files.wordpress.com/2016/09/jtr-cheat-sheet.pdf","title":"John The Ripper"},{"location":"Tech/InfoSec/Tools/John%20The%20Ripper/#linux","text":"It comes bundled with Kail, the binary is at: /usr/sbin/john Additional tools are saved in /usr/share/john . These are mainly used to convert various output into a form usable for John. e.g. convert windows hash dumps into john's format.","title":"Linux"},{"location":"Tech/InfoSec/Tools/John%20The%20Ripper/#windows","text":"For a Windows install, see https://kalitut.com/john-the-ripper/. Essentially we need to use cygwin and download a pre-compiled binary from here . Just download the binary and extract somewhere local, then access from MobaXterm or WSL. e.g. command from MobaXterm to run binary extracted in downloads folder: /drives/c/Users/Ryan/Downloads/winX64_1_JtR/JtR/run/john --test","title":"Windows"},{"location":"Tech/InfoSec/Tools/John%20The%20Ripper/#usage","text":"If you just run John against a file it will look for hashes and try to crack them: john <target_file> It will first try \"single crack\" mode, then use a wordlist with rules, and finally go for \"incremental\" mode. See modes for more details. You can specify specific 'modes' to use with e.g. john --single passwd_file You can obviously specify lots of options when using John e.g. specify a wordlist (John's default wordlist is at: /usr/share/john/password.lst ) with below command. (The --rules options tells John to use mangling rules on the words in the list and try the mangled versions too.) john --wordlist=password.lst --rules mypasswd You can actually generate the output of the --rules as applied to a wordlist (without attempting any cracking) with: john --wordlist=<wordlist file> --rules --stdout > rules_applied.txt You can also specify the algorithm to use with --format if you know what algorithm is needed for your hash. By specifying an algorithm you can make John use the GPU in some instances which will be faster than CPU based cracking. You can list all available formats with (the 'opencl' ones are GPU based): john --list=formats If you've cracked some passwords, they are stored in ~/.john/john.pot . The john.pot file is not meant to be human-friendly. You should be using John itself to display the contents of its \"pot file\" in a convenient format: john --show mypasswd You can also start John in it's own background process with the --session=<name> option. And check the status at any time with: john --status","title":"Usage"},{"location":"Tech/InfoSec/Tools/John%20The%20Ripper/#status","text":"John will occasionally report it's status, or status can be requested using above command. The output looks like: 0g 0:00:09:01 30.00% 1/3 (ETA: 22:54:26) 0g/s 20.71p/s 20.71c/s 20.71C/s This means: successful guess count (\"g\"), session duration (in the D:HH:MM:SS format for days, hours, minutes, and seconds), progress indicator (percent done and optionally pass number out of the total number of passes), The four speed metrics are: g/s is successful guesses per second (so it'll stay at 0 until at least one password is cracked), p/s is candidate passwords tested per second, c/s is \"crypts\" (password hash or cipher computations) per second, C/s is combinations of candidate password and target hash per second.","title":"Status"},{"location":"Tech/InfoSec/Tools/John%20The%20Ripper/#benchmarks","text":"You can also run a benchmark/test command to see how well your system is expected to perform: john --test This also shows the sheer variety of hashes that john can attempt to crack! Examples: A. Cracking passphrase for SSH keys For example if we had someone's private key but not the passphrase so still can't use it to access the target server. For testing, I generated a new keypair with passphrase test . The keypair is just saved as default id_rsa filenames. These were copied to a working dir for playing with. Run ssh2john on the id_rsa private key file: /usr/share/john/ssh2john.py ~/working/john/ssh/id_rsa > id_rsa.john Then run john itself against the output to see if we can get the password. Using john's default wordlist (see below example for custom wordlist): john id_rsa.john Once complete we can view results with: john --show id_rsa.john B. Running against Linux password file In linux all hashed passwords are saved in /etc/shadow along with other details like date of last password change etc. If you have access to both the /etc/passwd and /etc/shadow files, we can use unshadow to combine their info so that all user/password info is in one file. This will help john be more efficient as it can use some of the data in /etc/passwd to help inform some of it's password guesses. John will work against /etc/shadow even without doing unshadow first. sudo unshadow /etc/passwd /etc/shadow > unshadowed Then run John against it using the Rock You Wordlist wordlist: john --wordlist=/usr/share/wordlists/rockyou.txt --rules unshadowed And view any results with: john --show unshadowed C. Cracking Windows Password Hashes Still to document. See: https://null-byte.wonderhowto.com/how-to/use-john-ripper-metasploit-quickly-crack-windows-hashes-0200322/ https://www.securitynewspaper.com/2018/11/27/crack-windows-password-with-john-the-ripper/ Sources: https://www.hackingarticles.in/beginner-guide-john-the-ripper-part-1/ https://www.binarytides.com/cracking-linux-password-with-john-the-ripper-tutorial/ https://miloserdov.org/?p=4961","title":"Benchmarks"},{"location":"Tech/InfoSec/Tools/LOLBAS%20%26%20GTFOBins/","text":"Tags: #tools #ctf #pentesting #infosec #windows #linux Windows - LOLBAS - Living Off The Land Binaries and Scripts (and also Libraries) \u00b6 Repository of information on official signed Microsoft utilities which can be used for 'unintended' purposes, e.g. to exfiltrate data, create reverse shells, run unsigned code, ... A LOLBin/Lib/Script must: Be a Microsoft-signed file, either native to the OS or downloaded from Microsoft. Have extra \"unexpected\" functionality. It is not interesting to document intended use cases. Exceptions are application whitelisting bypasses Have functionality that would be useful to an APT or red team Interesting functionality can include: Executing code Arbitrary code execution Pass-through execution of other programs (unsigned) or scripts (via a LOLBin) Compiling code File operations Downloading Upload Copy Persistence Pass-through persistence utilizing existing LOLBin Persistence (e.g. hide data in ADS, execute at logon) UAC bypass Credential theft Dumping process memory Surveillance (e.g. keylogger, network trace) Log evasion/modification DLL side-loading/hijacking without being relocated elsewhere in the filesystem. Linux - GTFOBins \u00b6 GTFOBins is a curated list of Unix binaries that can be used to bypass local security restrictions in misconfigured systems. The project collects legitimate functions of Unix binaries that can be abused to ~~get the f**k~~ break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.","title":"LOLBAS & GTFOBins"},{"location":"Tech/InfoSec/Tools/LOLBAS%20%26%20GTFOBins/#windows-lolbas-living-off-the-land-binaries-and-scripts-and-also-libraries","text":"Repository of information on official signed Microsoft utilities which can be used for 'unintended' purposes, e.g. to exfiltrate data, create reverse shells, run unsigned code, ... A LOLBin/Lib/Script must: Be a Microsoft-signed file, either native to the OS or downloaded from Microsoft. Have extra \"unexpected\" functionality. It is not interesting to document intended use cases. Exceptions are application whitelisting bypasses Have functionality that would be useful to an APT or red team Interesting functionality can include: Executing code Arbitrary code execution Pass-through execution of other programs (unsigned) or scripts (via a LOLBin) Compiling code File operations Downloading Upload Copy Persistence Pass-through persistence utilizing existing LOLBin Persistence (e.g. hide data in ADS, execute at logon) UAC bypass Credential theft Dumping process memory Surveillance (e.g. keylogger, network trace) Log evasion/modification DLL side-loading/hijacking without being relocated elsewhere in the filesystem.","title":"Windows - LOLBAS - Living Off The Land Binaries and Scripts (and also Libraries)"},{"location":"Tech/InfoSec/Tools/LOLBAS%20%26%20GTFOBins/#linux-gtfobins","text":"GTFOBins is a curated list of Unix binaries that can be used to bypass local security restrictions in misconfigured systems. The project collects legitimate functions of Unix binaries that can be abused to ~~get the f**k~~ break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.","title":"Linux - GTFOBins"},{"location":"Tech/InfoSec/Tools/LinPEAS%20%26%20WinPEAS/","text":"Tags: #tools #ctf #pentesting #infosec #kali #windows Key Takeaways / Things to Remember \u00b6 Main supporting resource is full of great info: HackTricks LinPEAS & WinPEAS \u00b6 Some automated enumeration of Linux and Windows hosts. ( CTF Katana is similar) Detailed documentation about a lot of the potential exploits is here: https://book.hacktricks.xyz/ The script will attempt to highlight parts of the output which might be vulnerable to escalation attacks. The documentation above can help with understanding the specific vulnerability. LinPEAS \u00b6 Various other methods of getting it onto a victim machine depending on how secure it is. Can be downloaded from github and run with: wget https://raw.githubusercontent.com/carlospolop/privilege-escalation-awesome-scripts-suite/master/linPEAS/linpeas.sh chmod +x linpeas.sh ./linpeas.sh >linpeas.out less -R linpeas.out Or can be piped directly into sh without saving script on system with: curl https://raw.githubusercontent.com/carlospolop/privilege-escalation-awesome-scripts-suite/master/linPEAS/linpeas.sh | sh WinPEAS \u00b6 Again, various options for getting and running on target machine (exe, bat, obfuscated, ...). One liner to download and execute winPEASany from memory in a PS shell: $wp=[System.Reflection.Assembly]::Load([byte[]](Invoke-WebRequest \"https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/raw/master/winPEAS/winPEASexe/binaries/Obfuscated%20Releases/winPEASany.exe\" -UseBasicParsing | Select-Object -ExpandProperty Content)); [winPEAS.Program]::Main(\"\") Load from disk in memory and execute: $wp = [System.Reflection.Assembly]::Load([byte[]]([IO.File]::ReadAllBytes(\"D:\\Users\\victim\\winPEAS.exe\"))); [winPEAS.Program]::Main(\"\") #Put inside the quotes the winpeas parameters you want to use Sources: https://github.com/carlospolop/PEASS-ng https://book.hacktricks.xyz/","title":"LinPEAS & WinPEAS"},{"location":"Tech/InfoSec/Tools/LinPEAS%20%26%20WinPEAS/#key-takeaways-things-to-remember","text":"Main supporting resource is full of great info: HackTricks","title":"Key Takeaways / Things to Remember"},{"location":"Tech/InfoSec/Tools/LinPEAS%20%26%20WinPEAS/#linpeas-winpeas","text":"Some automated enumeration of Linux and Windows hosts. ( CTF Katana is similar) Detailed documentation about a lot of the potential exploits is here: https://book.hacktricks.xyz/ The script will attempt to highlight parts of the output which might be vulnerable to escalation attacks. The documentation above can help with understanding the specific vulnerability.","title":"LinPEAS &amp; WinPEAS"},{"location":"Tech/InfoSec/Tools/LinPEAS%20%26%20WinPEAS/#linpeas","text":"Various other methods of getting it onto a victim machine depending on how secure it is. Can be downloaded from github and run with: wget https://raw.githubusercontent.com/carlospolop/privilege-escalation-awesome-scripts-suite/master/linPEAS/linpeas.sh chmod +x linpeas.sh ./linpeas.sh >linpeas.out less -R linpeas.out Or can be piped directly into sh without saving script on system with: curl https://raw.githubusercontent.com/carlospolop/privilege-escalation-awesome-scripts-suite/master/linPEAS/linpeas.sh | sh","title":"LinPEAS"},{"location":"Tech/InfoSec/Tools/LinPEAS%20%26%20WinPEAS/#winpeas","text":"Again, various options for getting and running on target machine (exe, bat, obfuscated, ...). One liner to download and execute winPEASany from memory in a PS shell: $wp=[System.Reflection.Assembly]::Load([byte[]](Invoke-WebRequest \"https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/raw/master/winPEAS/winPEASexe/binaries/Obfuscated%20Releases/winPEASany.exe\" -UseBasicParsing | Select-Object -ExpandProperty Content)); [winPEAS.Program]::Main(\"\") Load from disk in memory and execute: $wp = [System.Reflection.Assembly]::Load([byte[]]([IO.File]::ReadAllBytes(\"D:\\Users\\victim\\winPEAS.exe\"))); [winPEAS.Program]::Main(\"\") #Put inside the quotes the winpeas parameters you want to use Sources: https://github.com/carlospolop/PEASS-ng https://book.hacktricks.xyz/","title":"WinPEAS"},{"location":"Tech/InfoSec/Tools/Miscellaneous%20Tools/","text":"Tags: #tools #ctf #pentesting #infosec #kali #binwalk Miscellaneous Tools \u00b6 binwalk \u00b6 A command-line tool to carve files out of another file. Usage to extract is binwalk -e [filename] and it will create a _[filename]_extracted directory. strings \u00b6 Tool to find text strings inside binary files. VERY useful in CTFs etc strings <filename> ltrace \u00b6 Program that runs and analyses specified command until it exits. It intercepts and records the dynamic library calls which are called by the executed process and the signals which are received by that process. You can use it to see exactly what a program is doing and can often be used in CFTs etc to find passwordss etc being passed as part of a command running. ltrace <command>","title":"Miscellaneous Tools"},{"location":"Tech/InfoSec/Tools/Miscellaneous%20Tools/#miscellaneous-tools","text":"","title":"Miscellaneous Tools"},{"location":"Tech/InfoSec/Tools/Miscellaneous%20Tools/#binwalk","text":"A command-line tool to carve files out of another file. Usage to extract is binwalk -e [filename] and it will create a _[filename]_extracted directory.","title":"binwalk"},{"location":"Tech/InfoSec/Tools/Miscellaneous%20Tools/#strings","text":"Tool to find text strings inside binary files. VERY useful in CTFs etc strings <filename>","title":"strings"},{"location":"Tech/InfoSec/Tools/Miscellaneous%20Tools/#ltrace","text":"Program that runs and analyses specified command until it exits. It intercepts and records the dynamic library calls which are called by the executed process and the signals which are received by that process. You can use it to see exactly what a program is doing and can often be used in CFTs etc to find passwordss etc being passed as part of a command running. ltrace <command>","title":"ltrace"},{"location":"Tech/InfoSec/Tools/Wordlists/","text":"Tags: #ctf #pentesting #infosec #wordlist Key Takeaways / Things to Remember \u00b6 Kali's built-in wordlists are at: /etc/share/wordlists including the RockYou wordlist Note that there is a whole repo full of wordlists at: https://github.com/danielmiessler/SecLists They are organised for various uses. Worth downloading in advance of any challenges. Custom lists with Crunch \u00b6 We can generate our own wordlists with #crunch. Lots of good crunch examples at man crunch Examples A. Defcon29 Badge Challenge e.g. Defcon29 badge challenge we knew that the URL was a combination of the badge names but didn't know the order or if the words were capitalised. We can generate wordlists to test with (we need to generate twice to include all lower-case and capitalised letters): ^644cab crunch 1 1 -o DC29_badge.txt -p Artist Human Goon Press Vendor Speaker Creator crunch 1 1 -p artist human goon press vendor speaker creator >> DC29_badge.txt -p supplies a list of characters or words to permute. The min/max lengths are not used but must still be passed so can be anything. -p must be the last option supplied! We can then pass this wordlist into Gobuster & Dirbuster to enumerate the defcon.org URL. B. Create list of all numeric only password between 4-6 characters long crunch 4 6 0123456789 > numeric_min4_max6.txt tail -3 numeric_min4_max6.txt 999997 999998 999999 head -n 3 numeric_min4_max6.txt 0000 0001 0002 C. Specify a pattern using -t -t allows you to specify a pattern: - @ will insert lower case characters - , will insert upper case characters - % will insert numbers - ^ will insert symbols Let's generate a 10 character password of lower-case letters ending 0316 (e.g. birthday) - output will be c. 10GB! crunch 10 10 -t @@@@@@0316 -o /root/birth_datlist.txt D. Use a pre-defined character set from /usr/share/rainbowcrack/charset.txt /usr/share/rainbowcrack/charset.txt contains definitions of lots of different character sets. We can specify the use of one of these in crunch command: crunch 8 8 -f /usr/share/rainbowcrack/charset.txt mixalpha -o /root/alphawordlist.lst Kali wordlists \u00b6 Kali's wordlists are located at /usr/share/wordlists Rock You Wordlist \u00b6 The rockyou wordlist is a password dictionary used to help to perform different types of password cracking attacks. It is a collection of the most used and potential passwords. Rock You is an old company that went bust ages ago. It can be used in multiple tools e.g. John The Ripper It can be downloaded from: https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt It also comes 'pre-installed' as a zipped file in Kali. But is owned by root. We want to change ownership of all the pre-installed wordlists to our user and unzip the rockyou file before we can use it: ll /usr/share/wordlists/ sudo chown -R ryan:ryan /usr/share/wordlists/ gzip -d /usr/share/wordlists/rockyou.txt.gz ll /usr/share/wordlists/rockyou.txt","title":"Wordlists"},{"location":"Tech/InfoSec/Tools/Wordlists/#key-takeaways-things-to-remember","text":"Kali's built-in wordlists are at: /etc/share/wordlists including the RockYou wordlist Note that there is a whole repo full of wordlists at: https://github.com/danielmiessler/SecLists They are organised for various uses. Worth downloading in advance of any challenges.","title":"Key Takeaways / Things to Remember"},{"location":"Tech/InfoSec/Tools/Wordlists/#custom-lists-with-crunch","text":"We can generate our own wordlists with #crunch. Lots of good crunch examples at man crunch Examples A. Defcon29 Badge Challenge e.g. Defcon29 badge challenge we knew that the URL was a combination of the badge names but didn't know the order or if the words were capitalised. We can generate wordlists to test with (we need to generate twice to include all lower-case and capitalised letters): ^644cab crunch 1 1 -o DC29_badge.txt -p Artist Human Goon Press Vendor Speaker Creator crunch 1 1 -p artist human goon press vendor speaker creator >> DC29_badge.txt -p supplies a list of characters or words to permute. The min/max lengths are not used but must still be passed so can be anything. -p must be the last option supplied! We can then pass this wordlist into Gobuster & Dirbuster to enumerate the defcon.org URL. B. Create list of all numeric only password between 4-6 characters long crunch 4 6 0123456789 > numeric_min4_max6.txt tail -3 numeric_min4_max6.txt 999997 999998 999999 head -n 3 numeric_min4_max6.txt 0000 0001 0002 C. Specify a pattern using -t -t allows you to specify a pattern: - @ will insert lower case characters - , will insert upper case characters - % will insert numbers - ^ will insert symbols Let's generate a 10 character password of lower-case letters ending 0316 (e.g. birthday) - output will be c. 10GB! crunch 10 10 -t @@@@@@0316 -o /root/birth_datlist.txt D. Use a pre-defined character set from /usr/share/rainbowcrack/charset.txt /usr/share/rainbowcrack/charset.txt contains definitions of lots of different character sets. We can specify the use of one of these in crunch command: crunch 8 8 -f /usr/share/rainbowcrack/charset.txt mixalpha -o /root/alphawordlist.lst","title":"Custom lists with Crunch"},{"location":"Tech/InfoSec/Tools/Wordlists/#kali-wordlists","text":"Kali's wordlists are located at /usr/share/wordlists","title":"Kali wordlists"},{"location":"Tech/InfoSec/Tools/Wordlists/#rock-you-wordlist","text":"The rockyou wordlist is a password dictionary used to help to perform different types of password cracking attacks. It is a collection of the most used and potential passwords. Rock You is an old company that went bust ages ago. It can be used in multiple tools e.g. John The Ripper It can be downloaded from: https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt It also comes 'pre-installed' as a zipped file in Kali. But is owned by root. We want to change ownership of all the pre-installed wordlists to our user and unzip the rockyou file before we can use it: ll /usr/share/wordlists/ sudo chown -R ryan:ryan /usr/share/wordlists/ gzip -d /usr/share/wordlists/rockyou.txt.gz ll /usr/share/wordlists/rockyou.txt","title":"Rock You Wordlist"},{"location":"Tech/Linux/SSH/","text":"Tags: #linux #ssh SSH \u00b6 include this with other SSH notes when we migrate to Obsidian ssh-pass \u00b6 Password automation i.e. can pass a password to SSH. The sshpass utility is designed to run SSH using the keyboard-interactive password authentication mode, but in a non-interactive way. Examples: A. Pass plain text on command line Use the -p (this is considered the least secure choice and shouldn't be used): sshpass -p !4u2tryhack ssh username@host.example.com Or can use -p with a password saved in a file but -f is better for that (see below): sshpass -p $(cat pass_file) ssh username@host.example.com The -p option looks like this when used in a shell script: $ sshpass -p !4u2tryhack ssh -o StrictHostKeyChecking=no username@host.example.com B. Read password from a file Use the -f option (the password should be the first line of the filename): echo '!4u2tryhack' >pass_file chmod 0400 pass_file sshpass -f pass_file ssh username@host.example.com Here is the -f option when used in shell script: $ sshpass -f pass_file ssh -o StrictHostKeyChecking=no username@host.example.com C. Use the -e option to pull password from environment variable SSHPASS : $ SSHPASS='!4u2tryhack' sshpass -e ssh username@host.example.com The -e option when used in shell script looks like this: $ SSHPASS='!4u2tryhack' sshpass -e ssh -o StrictHostKeyChecking=no username@host.example.com Sources: https://www.redhat.com/sysadmin/ssh-automation-sshpass","title":"SSH"},{"location":"Tech/Linux/SSH/#ssh","text":"include this with other SSH notes when we migrate to Obsidian","title":"SSH"},{"location":"Tech/Linux/SSH/#ssh-pass","text":"Password automation i.e. can pass a password to SSH. The sshpass utility is designed to run SSH using the keyboard-interactive password authentication mode, but in a non-interactive way. Examples: A. Pass plain text on command line Use the -p (this is considered the least secure choice and shouldn't be used): sshpass -p !4u2tryhack ssh username@host.example.com Or can use -p with a password saved in a file but -f is better for that (see below): sshpass -p $(cat pass_file) ssh username@host.example.com The -p option looks like this when used in a shell script: $ sshpass -p !4u2tryhack ssh -o StrictHostKeyChecking=no username@host.example.com B. Read password from a file Use the -f option (the password should be the first line of the filename): echo '!4u2tryhack' >pass_file chmod 0400 pass_file sshpass -f pass_file ssh username@host.example.com Here is the -f option when used in shell script: $ sshpass -f pass_file ssh -o StrictHostKeyChecking=no username@host.example.com C. Use the -e option to pull password from environment variable SSHPASS : $ SSHPASS='!4u2tryhack' sshpass -e ssh username@host.example.com The -e option when used in shell script looks like this: $ SSHPASS='!4u2tryhack' sshpass -e ssh -o StrictHostKeyChecking=no username@host.example.com Sources: https://www.redhat.com/sysadmin/ssh-automation-sshpass","title":"ssh-pass"},{"location":"Tech/Linux/Virtual%20Machine%20-%20Linux/","text":"Tags: #linux #virtual-machine #ubuntu #kali Virtual Machine - Linux \u00b6 Generally using VirtualBox for VMs, including replication of NAS environment to test things before intro to production. Below is a sample of notes which have come in handy when setting up VMs. Installing \u00b6 For Kali, see: https://www.kali.org/docs/virtualization/install-virtualbox-guest-vm/ VirtualBox Guest Additions - shared clipboard/folders/etc \u00b6 Note that in Kali, you can install VB Guest Additions from command line without the virtual CD function, see here . We're going to search the package manager for the guest additions package first to confirm the package name. Note that the --reinstall is important as we want to make sure we're not leaving anything pre-existing installed. Run: bash sudo apt update sudo apt-cache search virtualbox-guest sudo apt install -y --reinstall virtualbox-guest-x11 sudo shutdown -r now Inside VM go to Devices menu -> Insert Guest Additions CD image menu Use the following command to mount the CD sudo mount /dev/cdrom /media/cdrom Install dependencies for VirtualBox guest additions: sudo apt-get update sudo apt-get install build-essential linux-headers-`uname -r` Run installation script for the guest additions: sudo /media/cdrom/./VBoxLinuxAdditions.run If you get a permission denied error when running the executable (even when running as root) it may be due to a security setting to prevent the direct execution of binaries on the mounted CD... From source : ...the filesystem is mounted with the noexec option, so the execute permission bits on all files are ignored, and you cannot directly execute any program residing on this filesystem. Note that the noexec mount option is implied by the user option in /etc/fstab . ... If you use user and want to have executable files, use user,exec. To fix, either run mount command with exec option: Or edit /etc/fstab to change bash /dev/sr0 /media/cdrom0 udf,iso9660 user,noauto 0 0 To bash /dev/sr0 /media/cdrom0 udf,iso9660 user,exec 0 0 Reboot sudo shutdown -r now To get keyboard capture working properly \u00b6 Reboot after first boot worked for me. Below should work otherwise. Select keyboard from Menu Option initially to allow typing. Install dependencies: sudo apt-get install scim-bridge-client-qt scim-bridge-client-qt4 scim-bridge-client-gtk Shared folders with Windows host \u00b6 Install guest additions per above note Open VirtualBox Right-click your VM, then click Settings Go to Shared Folders section Add a new shared folder On Add Share prompt, select the Folder Path in your host that you want to be accessible inside your VM. In the Folder Name field, type shared Uncheck Read-only and Auto-mount, and check Make Permanent Start your VM Panel Restart \u00b6 In Kali 2021, using xfce4 (for the first time), the panel (taskbar) can disappear after a lock/unlock. To restart the panel, run: nohup xfce4-panel & Give user root permissions (not recommended for production systems) \u00b6 To give the user \"foo\" unlimited passwordless access to root privileges via the sudo command, edit /etc/sudoers by running sudo visudo and add the line: foo ALL = NOPASSWD: ALL Enable root login (not recommended for production systems) \u00b6 Source Suggest only doing this for initial set up to save time. Also check notes on SSH auto-login. sudo passwd root Edit SSH config nano /etc/ssh/sshd_config and add/uncomment the following line: PermitRootLogin yes Can now log in via ssh with username root & password you set up above. Once config complete, edit ssh config again and also disable root log in with: passwd -l root While here, disable the \u2018waiting for network config\u2019 message on startup when LAN unplugged: nano /etc/init/failsafe.conf Change the sleep values to 10 and this will cause it to wait for only 10 secs.","title":"Virtual Machine   Linux"},{"location":"Tech/Linux/Virtual%20Machine%20-%20Linux/#virtual-machine-linux","text":"Generally using VirtualBox for VMs, including replication of NAS environment to test things before intro to production. Below is a sample of notes which have come in handy when setting up VMs.","title":"Virtual Machine - Linux"},{"location":"Tech/Linux/Virtual%20Machine%20-%20Linux/#installing","text":"For Kali, see: https://www.kali.org/docs/virtualization/install-virtualbox-guest-vm/","title":"Installing"},{"location":"Tech/Linux/Virtual%20Machine%20-%20Linux/#virtualbox-guest-additions-shared-clipboardfoldersetc","text":"Note that in Kali, you can install VB Guest Additions from command line without the virtual CD function, see here . We're going to search the package manager for the guest additions package first to confirm the package name. Note that the --reinstall is important as we want to make sure we're not leaving anything pre-existing installed. Run: bash sudo apt update sudo apt-cache search virtualbox-guest sudo apt install -y --reinstall virtualbox-guest-x11 sudo shutdown -r now Inside VM go to Devices menu -> Insert Guest Additions CD image menu Use the following command to mount the CD sudo mount /dev/cdrom /media/cdrom Install dependencies for VirtualBox guest additions: sudo apt-get update sudo apt-get install build-essential linux-headers-`uname -r` Run installation script for the guest additions: sudo /media/cdrom/./VBoxLinuxAdditions.run If you get a permission denied error when running the executable (even when running as root) it may be due to a security setting to prevent the direct execution of binaries on the mounted CD... From source : ...the filesystem is mounted with the noexec option, so the execute permission bits on all files are ignored, and you cannot directly execute any program residing on this filesystem. Note that the noexec mount option is implied by the user option in /etc/fstab . ... If you use user and want to have executable files, use user,exec. To fix, either run mount command with exec option: Or edit /etc/fstab to change bash /dev/sr0 /media/cdrom0 udf,iso9660 user,noauto 0 0 To bash /dev/sr0 /media/cdrom0 udf,iso9660 user,exec 0 0 Reboot sudo shutdown -r now","title":"VirtualBox Guest Additions - shared clipboard/folders/etc"},{"location":"Tech/Linux/Virtual%20Machine%20-%20Linux/#to-get-keyboard-capture-working-properly","text":"Reboot after first boot worked for me. Below should work otherwise. Select keyboard from Menu Option initially to allow typing. Install dependencies: sudo apt-get install scim-bridge-client-qt scim-bridge-client-qt4 scim-bridge-client-gtk","title":"To get keyboard capture working properly"},{"location":"Tech/Linux/Virtual%20Machine%20-%20Linux/#shared-folders-with-windows-host","text":"Install guest additions per above note Open VirtualBox Right-click your VM, then click Settings Go to Shared Folders section Add a new shared folder On Add Share prompt, select the Folder Path in your host that you want to be accessible inside your VM. In the Folder Name field, type shared Uncheck Read-only and Auto-mount, and check Make Permanent Start your VM","title":"Shared folders with Windows host"},{"location":"Tech/Linux/Virtual%20Machine%20-%20Linux/#panel-restart","text":"In Kali 2021, using xfce4 (for the first time), the panel (taskbar) can disappear after a lock/unlock. To restart the panel, run: nohup xfce4-panel &","title":"Panel Restart"},{"location":"Tech/Linux/Virtual%20Machine%20-%20Linux/#give-user-root-permissions-not-recommended-for-production-systems","text":"To give the user \"foo\" unlimited passwordless access to root privileges via the sudo command, edit /etc/sudoers by running sudo visudo and add the line: foo ALL = NOPASSWD: ALL","title":"Give user root permissions (not recommended for production systems)"},{"location":"Tech/Linux/Virtual%20Machine%20-%20Linux/#enable-root-login-not-recommended-for-production-systems","text":"Source Suggest only doing this for initial set up to save time. Also check notes on SSH auto-login. sudo passwd root Edit SSH config nano /etc/ssh/sshd_config and add/uncomment the following line: PermitRootLogin yes Can now log in via ssh with username root & password you set up above. Once config complete, edit ssh config again and also disable root log in with: passwd -l root While here, disable the \u2018waiting for network config\u2019 message on startup when LAN unplugged: nano /etc/init/failsafe.conf Change the sleep values to 10 and this will cause it to wait for only 10 secs.","title":"Enable root login (not recommended for production systems)"}]}